#!/usr/bin/env ruby

# vim: set tabstop=2 shiftwidth=2 softtabstop=2 cc=100;

require 'rubygems'
require 'commander/import'
require 'resque'
require 'geoloader'

program :version, '0.0.1'
program :description, 'Load GeoTIFFs and Shapefiles into PostGIS, Geoserver, and Solr.'

#
# Load a batch manifest or an individual GeoTIFF / Shapefile.
#
command :load do |c|
  c.syntax  = 'geoloader load [filename]'
  c.summary = 'Load a YAML batch manifest.'
  c.option  "-q", "--resque", "Push jobs onto Resque."
  c.action do |args, options|

    options.default :resque => false

    # Read the YAML manifest.
    file_path = File.expand_path(args[0])
    yaml = YAML::load(File.read(file_path))

    # Process each of the matched files.
    Dir.glob("#{File.dirname(file_path)}/#{yaml["files"]}") do |f|
      case File.extname(f)
      when ".shp"
        load_shapefile(f, yaml, options.resque)
      when ".tif"
        load_geotiff(f, yaml, options.resque)
      end
    end

  end
end

#
# Spin up a Resque worker.
#
command :work do |c|
  c.syntax  = 'geoloader work'
  c.summary = 'Start a Resque worker.'
  c.action do |args, options|
    Resque::Worker.new("geoloader").work
  end
end

#
# Delete all databases, stores, and documents in a workspace.
#
command :clear do |c|
  c.syntax  = 'geoloader clear [workspace]'
  c.summary = 'Clear a workspace.'
  c.action do |args, options|
    Geoloader::Geoserver.new.delete_workspace(args[0])
    Geoloader::Solr.new.delete_by_workspace(args[0])
  end
end

#
# Load a Shapefile.
#
# @param [String] file_path
# @param [Hash] metadata
# @param [Boolean] resque
#
def load_shapefile(file_path, metadata, resque)
  if resque
    Resque.enqueue(Geoloader::ShapefileLoader, file_path, metadata)
  else
    Geoloader::ShapefileLoader.new(file_path, metadata).load
  end
end

#
# Load a GeoTIFF.
#
# @param [String] file_path
# @param [Hash] metadata
# @param [Boolean] resque
#
def load_geotiff(file_path, metadata, resque)
  if resque
    Resque.enqueue(Geoloader::GeotiffLoader, file_path, metadata)
  else
    Geoloader::GeotiffLoader.new(file_path, metadata).load
  end
end
